{"version":3,"file":"index.js","sources":["../../../src/generators/apply-project-type/index.ts"],"sourcesContent":["/**\n * @file Generator for applying a project type to a project.\n *\n * This generator applies a project type configuration to a specific project.\n */\n\nimport {\n  Tree,\n  formatFiles,\n  generateFiles,\n  getProjects,\n  joinPathFragments,\n  logger,\n  readJson,\n  updateJson,\n  updateProjectConfiguration,\n  readProjectConfiguration,\n} from \"@nx/devkit\";\nimport { ApplyProjectTypeGeneratorSchema } from \"./schema\";\nimport {\n  getProjectType,\n  getTemplateDir,\n  prepareTemplateVariables,\n} from \"../../lib/project-type-utils\";\nimport * as path from \"path\";\n\n/**\n * Main generator function for applying a project type to a project.\n * @param tree - The Nx file tree.\n * @param options - The generator options.\n * @returns A function to run after generation (can be empty).\n * @example\n * // Will be called by Nx when running the generator\n * await applyProjectTypeGenerator(tree, { project: 'my-project', type: 'ai-safe' });\n */\nexport default async function applyProjectTypeGenerator(\n  tree: Tree,\n  options: ApplyProjectTypeGeneratorSchema,\n): Promise<() => void> {\n  const projectName = options.project;\n  const projectType = options.type || \"ai-safe\";\n\n  if (!projectName) {\n    logger.error(\"You must specify a project name.\");\n    throw new Error(\"Missing project name\");\n  }\n\n  try {\n    // Read the project configuration\n    const projectConfig = readProjectConfiguration(tree, projectName);\n\n    // Update tags based on the project type\n    if (!projectConfig.tags) {\n      projectConfig.tags = [];\n    }\n\n    // Check if the tag for this project type already exists\n    if (!projectConfig.tags.includes(projectType)) {\n      projectConfig.tags.push(projectType);\n      logger.info(`Adding ${projectType} tag to ${projectName}`);\n    } else {\n      logger.info(`Project ${projectName} already has the ${projectType} tag`);\n    }\n\n    // Update the project configuration\n    updateProjectConfiguration(tree, projectName, projectConfig);\n\n    // Add configuration based on the project type\n    if (projectType === \"ai-safe\") {\n      applyAiSafeConfig(tree, projectName, projectConfig);\n    }\n\n    // Format any modified files\n    await formatFiles(tree);\n\n    logger.info(`Successfully applied ${projectType} configuration to ${projectName}.`);\n    return () => {\n      logger.info(`Successfully applied project type ${projectType} to project ${projectName}`);\n    };\n  } catch (error) {\n    logger.error(\n      `Failed to apply project type to ${projectName}: ${error instanceof Error ? error.message : String(error)}`,\n    );\n    throw error;\n  }\n}\n\n/**\n * Apply AI-safe specific configuration to a project.\n * @param tree - The Nx virtual file tree.\n * @param projectName - The name of the project.\n * @param projectConfig - The project configuration.\n * @example\n */\nfunction applyAiSafeConfig(tree: Tree, projectName: string, projectConfig: any) {\n  logger.info(`Applying AI-safe configuration to ${projectName}...`);\n\n  // You would add specific AI-safe configuration here\n  // For example, adding specific linting rules, test settings, etc.\n\n  // Example: Update build configuration if it exists\n  if (projectConfig.targets?.build) {\n    if (!projectConfig.targets.build.configurations) {\n      projectConfig.targets.build.configurations = {};\n    }\n\n    projectConfig.targets.build.configurations[\"ai-safe\"] = {\n      tsConfig: \"tsconfig.lib.json\",\n    };\n\n    updateProjectConfiguration(tree, projectName, projectConfig);\n    logger.info(`Added AI-safe build configuration to ${projectName}`);\n  }\n}\n\n// Handle command-line execution when run directly with ts-node\nif (require.main === module) {\n  // Parse command-line arguments\n  const args = process.argv.slice(2);\n  const options: ApplyProjectTypeGeneratorSchema = {\n    project: \"\",\n    type: \"ai-safe\",\n  };\n\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i];\n    if (arg.startsWith(\"--project=\")) {\n      options.project = arg.substring(\"--project=\".length);\n    } else if (arg === \"--project\" && i + 1 < args.length) {\n      options.project = args[++i];\n    } else if (arg.startsWith(\"--type=\")) {\n      options.type = arg.substring(\"--type=\".length);\n    } else if (arg === \"--type\" && i + 1 < args.length) {\n      options.type = args[++i];\n    }\n  }\n\n  // Create a simple file system tree for direct execution\n  const fs = require(\"fs\");\n  const simpleTree: Tree = {\n    root: process.cwd(),\n    read(filePath: string) {\n      try {\n        return fs.readFileSync(filePath, \"utf-8\");\n      } catch (e) {\n        return null;\n      }\n    },\n    write(filePath: string, content: string) {\n      fs.writeFileSync(filePath, content, \"utf-8\");\n    },\n    exists(filePath: string) {\n      return fs.existsSync(filePath);\n    },\n    delete(filePath: string) {\n      fs.unlinkSync(filePath);\n    },\n    isFile(filePath: string) {\n      try {\n        return fs.statSync(filePath).isFile();\n      } catch (e) {\n        return false;\n      }\n    },\n    children(dirPath: string) {\n      return fs.readdirSync(dirPath);\n    },\n    // Add other Tree methods as needed\n  } as any;\n\n  console.log(`Applying project type ${options.type} to project ${options.project}...`);\n\n  // Execute the generator\n  applyProjectTypeGenerator(simpleTree, options).catch(error => {\n    console.error(\"Error:\", error);\n    process.exit(1);\n  });\n}\n"],"names":["logger","readProjectConfiguration","updateProjectConfiguration","formatFiles"],"mappings":"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"}