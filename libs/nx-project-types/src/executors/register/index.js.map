{"version":3,"file":"index.js","sources":["../../../src/executors/register/index.ts"],"sourcesContent":["/**\n * @file Register executor implementation.\n *\n * This executor registers nx-project-types with the Nx workspace by updating nx.json.\n */\n\nimport { ExecutorContext, logger } from \"@nx/devkit\";\nimport { RegisterExecutorSchema } from \"./schema\";\nimport * as path from \"path\";\nimport * as fs from \"fs\";\n\n/**\n * Main executor function for registering nx-project-types.\n * @param options - The executor options.\n * @param context - The executor context.\n * @returns Success status.\n * @example\n */\nexport default async function registerExecutor(\n  options: RegisterExecutorSchema,\n  context: ExecutorContext,\n): Promise<{ success: boolean }> {\n  const { dryRun } = options;\n\n  logger.info(\n    `${dryRun ? \"[DRY RUN] Would register\" : \"Registering\"} nx-project-types with the Nx workspace`,\n  );\n\n  try {\n    // Get the path to the nx.json file\n    const nxJsonPath = path.join(context.root, \"nx.json\");\n\n    if (dryRun) {\n      logger.info(`Would update ${nxJsonPath} to include nx-project-types generators`);\n      return { success: true };\n    }\n\n    // Read the current nx.json\n    const nxJson = JSON.parse(fs.readFileSync(nxJsonPath, \"utf8\"));\n\n    // Create generators entry if it doesn't exist\n    if (!nxJson.generators) {\n      nxJson.generators = {};\n    }\n\n    // Add nx-project-types generators\n    nxJson.generators[\"nx-project-types\"] = {\n      \"apply-project-type\": {\n        factory: \"./workspace/build-tools/nx-project-types/generators/apply-project-type\",\n        schema:\n          \"./workspace/build-tools/nx-project-types/generators/apply-project-type/schema.json\",\n      },\n      \"sync-project-types\": {\n        factory: \"./workspace/build-tools/nx-project-types/generators/sync-project-types\",\n        schema:\n          \"./workspace/build-tools/nx-project-types/generators/sync-project-types/schema.json\",\n      },\n    };\n\n    // Write the updated nx.json\n    fs.writeFileSync(nxJsonPath, JSON.stringify(nxJson, null, 2));\n\n    logger.info(\"Successfully registered nx-project-types with the Nx workspace\");\n    return { success: true };\n  } catch (error) {\n    logger.error(\"Failed to register nx-project-types with the Nx workspace\");\n    logger.error(error);\n    return { success: false };\n  }\n}\n"],"names":["logger","path","fs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAIG;AAOH;;;;;;AAMG;AACY,eAAe,gBAAgB,CAC5C,OAA+B,EAC/B,OAAwB,EAAA;AAExB,IAAA,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO;AAE1B,IAAAA,aAAM,CAAC,IAAI,CACT,CAAA,EAAG,MAAM,GAAG,0BAA0B,GAAG,aAAa,CAAA,uCAAA,CAAyC,CAChG;AAED,IAAA,IAAI;;AAEF,QAAA,MAAM,UAAU,GAAGC,eAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC;QAErD,IAAI,MAAM,EAAE;AACV,YAAAD,aAAM,CAAC,IAAI,CAAC,gBAAgB,UAAU,CAAA,uCAAA,CAAyC,CAAC;AAChF,YAAA,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE;;;AAI1B,QAAA,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAACE,aAAE,CAAC,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;;AAG9D,QAAA,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE;AACtB,YAAA,MAAM,CAAC,UAAU,GAAG,EAAE;;;AAIxB,QAAA,MAAM,CAAC,UAAU,CAAC,kBAAkB,CAAC,GAAG;AACtC,YAAA,oBAAoB,EAAE;AACpB,gBAAA,OAAO,EAAE,wEAAwE;AACjF,gBAAA,MAAM,EACJ,oFAAoF;AACvF,aAAA;AACD,YAAA,oBAAoB,EAAE;AACpB,gBAAA,OAAO,EAAE,wEAAwE;AACjF,gBAAA,MAAM,EACJ,oFAAoF;AACvF,aAAA;SACF;;AAGD,QAAAA,aAAE,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AAE7D,QAAAF,aAAM,CAAC,IAAI,CAAC,gEAAgE,CAAC;AAC7E,QAAA,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE;;IACxB,OAAO,KAAK,EAAE;AACd,QAAAA,aAAM,CAAC,KAAK,CAAC,2DAA2D,CAAC;AACzE,QAAAA,aAAM,CAAC,KAAK,CAAC,KAAK,CAAC;AACnB,QAAA,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE;;AAE7B;;;;"}